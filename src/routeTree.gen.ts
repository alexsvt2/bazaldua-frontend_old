/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ScannerIndexImport } from './routes/scanner/index'
import { Route as ReportsIndexImport } from './routes/reports/index'
import { Route as ProductsIndexImport } from './routes/products/index'
import { Route as AuthIndexImport } from './routes/auth/index'
import { Route as ProductsProductIdImport } from './routes/products/$productId'
import { Route as CustomersCustomerIdImport } from './routes/customers/$customerId'
import { Route as ProductsNewIndexImport } from './routes/products/new/index'
import { Route as ProductsInstanceIndexImport } from './routes/products/instance/index'
import { Route as AuthLoginIndexImport } from './routes/auth/login/index'
import { Route as ProductsInstanceNewImport } from './routes/products/instance/new'

// Create Virtual Routes

const AboutLazyImport = createFileRoute('/about')()
const IndexLazyImport = createFileRoute('/')()
const CustomersIndexLazyImport = createFileRoute('/customers/')()
const CustomersNewLazyImport = createFileRoute('/customers/new')()

// Create/Update Routes

const AboutLazyRoute = AboutLazyImport.update({
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const CustomersIndexLazyRoute = CustomersIndexLazyImport.update({
  path: '/customers/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/customers/index.lazy').then((d) => d.Route),
)

const ScannerIndexRoute = ScannerIndexImport.update({
  path: '/scanner/',
  getParentRoute: () => rootRoute,
} as any)

const ReportsIndexRoute = ReportsIndexImport.update({
  path: '/reports/',
  getParentRoute: () => rootRoute,
} as any)

const ProductsIndexRoute = ProductsIndexImport.update({
  path: '/products/',
  getParentRoute: () => rootRoute,
} as any)

const AuthIndexRoute = AuthIndexImport.update({
  path: '/auth/',
  getParentRoute: () => rootRoute,
} as any)

const CustomersNewLazyRoute = CustomersNewLazyImport.update({
  path: '/customers/new',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/customers/new.lazy').then((d) => d.Route))

const ProductsProductIdRoute = ProductsProductIdImport.update({
  path: '/products/$productId',
  getParentRoute: () => rootRoute,
} as any)

const CustomersCustomerIdRoute = CustomersCustomerIdImport.update({
  path: '/customers/$customerId',
  getParentRoute: () => rootRoute,
} as any)

const ProductsNewIndexRoute = ProductsNewIndexImport.update({
  path: '/products/new/',
  getParentRoute: () => rootRoute,
} as any)

const ProductsInstanceIndexRoute = ProductsInstanceIndexImport.update({
  path: '/products/instance/',
  getParentRoute: () => rootRoute,
} as any)

const AuthLoginIndexRoute = AuthLoginIndexImport.update({
  path: '/auth/login/',
  getParentRoute: () => rootRoute,
} as any)

const ProductsInstanceNewRoute = ProductsInstanceNewImport.update({
  path: '/products/instance/new',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/customers/$customerId': {
      id: '/customers/$customerId'
      path: '/customers/$customerId'
      fullPath: '/customers/$customerId'
      preLoaderRoute: typeof CustomersCustomerIdImport
      parentRoute: typeof rootRoute
    }
    '/products/$productId': {
      id: '/products/$productId'
      path: '/products/$productId'
      fullPath: '/products/$productId'
      preLoaderRoute: typeof ProductsProductIdImport
      parentRoute: typeof rootRoute
    }
    '/customers/new': {
      id: '/customers/new'
      path: '/customers/new'
      fullPath: '/customers/new'
      preLoaderRoute: typeof CustomersNewLazyImport
      parentRoute: typeof rootRoute
    }
    '/auth/': {
      id: '/auth/'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthIndexImport
      parentRoute: typeof rootRoute
    }
    '/products/': {
      id: '/products/'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof ProductsIndexImport
      parentRoute: typeof rootRoute
    }
    '/reports/': {
      id: '/reports/'
      path: '/reports'
      fullPath: '/reports'
      preLoaderRoute: typeof ReportsIndexImport
      parentRoute: typeof rootRoute
    }
    '/scanner/': {
      id: '/scanner/'
      path: '/scanner'
      fullPath: '/scanner'
      preLoaderRoute: typeof ScannerIndexImport
      parentRoute: typeof rootRoute
    }
    '/customers/': {
      id: '/customers/'
      path: '/customers'
      fullPath: '/customers'
      preLoaderRoute: typeof CustomersIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/products/instance/new': {
      id: '/products/instance/new'
      path: '/products/instance/new'
      fullPath: '/products/instance/new'
      preLoaderRoute: typeof ProductsInstanceNewImport
      parentRoute: typeof rootRoute
    }
    '/auth/login/': {
      id: '/auth/login/'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginIndexImport
      parentRoute: typeof rootRoute
    }
    '/products/instance/': {
      id: '/products/instance/'
      path: '/products/instance'
      fullPath: '/products/instance'
      preLoaderRoute: typeof ProductsInstanceIndexImport
      parentRoute: typeof rootRoute
    }
    '/products/new/': {
      id: '/products/new/'
      path: '/products/new'
      fullPath: '/products/new'
      preLoaderRoute: typeof ProductsNewIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexLazyRoute,
  AboutLazyRoute,
  CustomersCustomerIdRoute,
  ProductsProductIdRoute,
  CustomersNewLazyRoute,
  AuthIndexRoute,
  ProductsIndexRoute,
  ReportsIndexRoute,
  ScannerIndexRoute,
  CustomersIndexLazyRoute,
  ProductsInstanceNewRoute,
  AuthLoginIndexRoute,
  ProductsInstanceIndexRoute,
  ProductsNewIndexRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/customers/$customerId",
        "/products/$productId",
        "/customers/new",
        "/auth/",
        "/products/",
        "/reports/",
        "/scanner/",
        "/customers/",
        "/products/instance/new",
        "/auth/login/",
        "/products/instance/",
        "/products/new/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/customers/$customerId": {
      "filePath": "customers/$customerId.tsx"
    },
    "/products/$productId": {
      "filePath": "products/$productId.tsx"
    },
    "/customers/new": {
      "filePath": "customers/new.lazy.tsx"
    },
    "/auth/": {
      "filePath": "auth/index.tsx"
    },
    "/products/": {
      "filePath": "products/index.tsx"
    },
    "/reports/": {
      "filePath": "reports/index.tsx"
    },
    "/scanner/": {
      "filePath": "scanner/index.tsx"
    },
    "/customers/": {
      "filePath": "customers/index.lazy.tsx"
    },
    "/products/instance/new": {
      "filePath": "products/instance/new.tsx"
    },
    "/auth/login/": {
      "filePath": "auth/login/index.tsx"
    },
    "/products/instance/": {
      "filePath": "products/instance/index.tsx"
    },
    "/products/new/": {
      "filePath": "products/new/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
